const express = require('express');
const router = express.Router();
const { v4: uuidv4 } = require('uuid');
const { 
  checkArtworkTitle, 
  checkArtworkImage, 
  checkArtworkLocation 
} = require('../helpers/artworkEndpointHelpers');
const knex = require('../db/knexfile');

const db = require('knex')(knex.development);


/**
* Structure artwork object and parameter
*
* @param {integer} id: Unique identifier for the artwork, automatically generated by database.
* @param {string} title: Name of the artwork.
* @param {string} artist_uuid: auto generated unique identifier linked to the artist.
* @param {string} image_url: URL leading to an image of the artwork
* @param {string} location_geohash: unique string representing the location of the artwork
*/

/**
 * Create Artwork
 *
 * Creates a new artwork entry in the 'artworks' table with the provided data.
 *
 * @route POST /
 * @param {string} title - The title of the artwork.
 * @param {string} image_url - The URL of the artwork's image.
 * @param {string} location_geohash - The geohash representing the location of the artwork.
 * @param {string} [artist_uuid] - Optional artist UUID. If not provided, a new UUID will be generated.
 * @returns {Object} 201 - The newly created artwork object.
 * @returns {Object} 400 - A message indicating that the provided data is not formatted correctly.
 * @returns {Object} 500 - An error object if the operation fails.
 * @name CreateArtwork
 * @function
 */
router.post('/', async (req, res) => {
  const { title, image_url, location_geohash } = req.body;
  let { artist_uuid } = req.body;

  if (!artist_uuid) {
    artist_uuid = uuidv4();
  }

  if (checkArtworkTitle(title) && checkArtworkImage(image_url) && checkArtworkLocation(location_geohash)) {
    try {
      const insertedData = await db('artworks').insert({ title, artist_uuid, image_url, location_geohash }).returning('*');
      const insertedArtwork = insertedData[0];

      return res.status(201).json({
        message: 'Artwork created successfully',
        artwork: insertedArtwork,
      });
    } catch (error) {
      return res.status(500).json({ error: 'Internal Server Error' });
    }
  } else {
    return res.status(400).json({ message: 'Data not formatted correctly' });
  }
});

/**
 * Get All Artworks
 *
 * Retrieves a list of all artworks from the 'artworks' table in the database.
 *
 * @route GET /
 * @returns {Object} 200 - An array of artwork objects.
 * @returns {Object} 500 - An error object if the operation fails.
 * @name GetAllArtworks
 * @function
 */
router.get('/', (req, res) => {
  db('artworks')
    .select()
    .then((artworks) => res.status(200).json(artworks))
    .catch(() => res.status(500).json({ error: 'Internal Server Error' }));
});

/**
 * Get Artwork by ID
 *
 * Retrieves an artwork from the 'artworks' table based on the provided ID.
 *
 * @route GET /:id
 * @param {number} id - The ID of the artwork to retrieve.
 * @returns {Object} 200 - The requested artwork object.
 * @returns {Object} 404 - An error object indicating that the artwork was not found.
 * @returns {Object} 400 - An error object indicating that an invalid ID was provided.
 * @returns {Object} 500 - An error object if the operation fails.
 * @name GetArtworkById
 * @function
 */
router.get('/:id', async (req, res) => {
  const id = parseInt(req.params.id);

  if (id >= 0 && Number.isInteger(id) && id < 9999999) {
    try {
      const artwork = await db('artworks').where({ id }).first();

      if (artwork) {
        return res.status(200).json(artwork);
      } else {
        return res.status(404).json({ error: 'Artwork not found' });
      }
    } catch (error) {
      console.error(error);
      return res.status(500).json({ error: 'Internal Server Error' });
    }
  } else {
    return res.status(400).json({ error: 'Invalid ID provided' });
  }
});

/**
 * Update Artwork by ID
 *
 * Updates an existing artwork in the 'artworks' table based on the provided ID.
 *
 * @route PUT /:artworkId
 * @param {number} artworkId - The ID of the artwork to update.
 * @param {string} title - The updated title of the artwork.
 * @param {string} image_url - The updated URL of the artwork's image.
 * @param {string} location_geohash - The updated geohash representing the location of the artwork.
 * @returns {Object} 200 - The updated artwork object.
 * @returns {Object} 404 - An error object indicating that the artwork was not found.
 * @returns {Object} 400 - A message indicating that the provided data is not formatted correctly.
 * @returns {Object} 500 - An error object if the operation fails.
 * @name UpdateArtworkById
 * @function
 */
router.put('/:artworkId', async (req, res) => {
  const artworkId = req.params.artworkId;

  if (!Number.isInteger(Number(artworkId))) {
    return res.status(400).json({ message: 'Invalid artwork ID' });
  }

  const { title, image_url, location_geohash } = req.body;

  try {
    const existingArtwork = await db('artworks').where({ id: artworkId }).first();

    if (!existingArtwork) {
      return res.status(404).json({ error: 'Artwork not found' });
    }

    if (checkArtworkTitle(title) && checkArtworkImage(image_url) && checkArtworkLocation(location_geohash)) {
      const updatedData = await db('artworks').where({ id: artworkId }).update({ title, image_url, location_geohash }).returning('*');

      if (updatedData.length > 0) {
        const updatedArtwork = updatedData[0];
        return res.status(200).json({
          message: 'Artwork updated successfully',
          artwork: updatedArtwork,
        });
      } else {
        return res.status(404).json({ error: 'Artwork not found' });
      }
    } else {
      return res.status(400).json({ message: 'Data not formatted correctly' });
    }
  } catch (error) {
    return res.status(500).json({ error: 'Internal Server Error' });
  }
});

/**
 * Delete Artwork by ID
 *
 * Deletes an artwork from the 'artworks' table based on the provided ID.
 *
 * @route DELETE /:id
 * @param {number} id - The ID of the artwork to delete.
 * @returns {Object} 204 - No content, indicating successful deletion.
 * @returns {Object} 404 - An error object indicating that the artwork was not found.
 * @returns {Object} 500 - An error object if the operation fails.
 * @name DeleteArtworkById
 * @function
 */
router.delete('/:id', async (req, res) => {
  const artworkId = parseInt(req.params.id);

  if (isNaN(artworkId) || artworkId < 0 || artworkId >= 9999999) {
    return res.status(404).json({ error: 'Invalid ID provided' });
  }

  try {
    const deletedCount = await db('artworks').where({ id: artworkId }).del();

    if (deletedCount === 0) {
      return res.status(404).json({ error: 'Artwork not found' });
    }

    return res.status(204).send();
  } catch (error) {
    return res.status(500).json({ error: 'Internal Server Error' });
  }
});

module.exports = router;
